    @Test
    fun company() {
        val person = introduce {
            name("김우재")
            company("취준생")
        }
        Assertions.assertThat(person.company).isEqualTo("취준생")
    }

    @Test
    fun soft() {
        val person = introduce {
            name("김우재")
            company("취준생")
            skills {
                soft("A passion for problem solving")
            }
        }
        Assertions.assertThat(person.skills).contains(Soft("A"))
    }

    @Test
    fun double_soft() {
        val person = introduce {
            name("김우재")
            company("취준생")
            skills {
                soft("A passion for problem solving")
                soft("Good communication skills")
            }
        }
        Assertions.assertThat(person.skills).contains(Hard("A"))
    }

    @Test
    fun hard() {
        val person = introduce {
            name("김우재")
            company("취준생")
            skills {
                soft("A passion for problem solving")
                soft("Good communication skills")
                hard("Kotlin")
            }
        }
        Assertions.assertThat(person.skills).contains(Hard("A"))
    }
}

// Person 에 있는 함수만 == Person.()
private fun introduce(initializer: PersonBuilder.() -> Unit): Person {
    return PersonBuilder().apply(initializer).build()
}

data class Person(val name: String, val company: String? = null, val skills: Skills)

class PersonBuilder {
    private lateinit var name: String
    private var company: String? = null
    private var skills: Skills = Skills()

    fun name(name: String) {
        this.name = name
    }

    fun company(company: String) {
        this.company = company
    }

    fun skills(initializer: Skills.() -> Unit) {
        skills = Skills().apply(initializer)
    }

    fun build(): Person = Person(name, company, skills)
}

class Skills(val skills: MutableList<Skill> = mutableListOf()) : List<Skill> by skills {
    fun soft(name: String) {
        skills.add(Soft(name))
    }

    fun hard(name: String) {
        skills.add(Hard(name))
    }
}

sealed class Skill

data class Hard(val name: String) : Skill()
data class Soft(val name: String) : Skill()

